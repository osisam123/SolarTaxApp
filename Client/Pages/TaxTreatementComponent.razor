@page "/taxtreatement"
@using SolarTaxApp.Client.ViewModels
@inject IStateTaxViewModel stateTaxViewModel
@inject ITaxTreatementViewModel taxTreatementViewModel

<h3>Tax Treatement</h3>
<center>
    <div class="col-md-12">
        <div class="row">
            <div class="col-3">
                <a href="addtaxtreatement" class="btn btn-outline-primary">New Tax Treatement</a>
            </div>
            <div class="row col-8">
                <input type="search" class="form-control col-4" />&nbsp;<button class="btn btn-secondary col-2"><span class="oi oi-magnifying-glass"></span>Search</button>
            </div>
        </div>
        <div class="col-lg-12">
            @if (stateTaxViewModel.StateTaxes == null)
            {
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            }
            else
            {
                <table class="table" style="font-size:0.7rem">
                    <thead>
                        <tr>
                            <th>Solar Modular Capacity</th>
                            <th>HSCode</th>
                            <th>Description</th>
                            <th>State Code</th>
                            <th>Tax Code</th>
                            <th>Tax(%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stateTax in stateTaxList)
                        {
                            <tr>
                                <td>
                                    @stateTax.SolarModularCapacity
                                </td>
                                <td>
                                    @stateTax.HSCode
                                </td>
                                <td>
                                    @stateTax.Description
                                </td>
                                <td>
                                    @stateTax.StateCode
                                </td>
                                <td>
                                    @stateTax.TaxCode
                                </td>
                                <td>
                                    @stateTax.Taxpercentage
                                </td>
                                <td class="row">
                                    <a class="btn btn-primary" href="editstatetax/@stateTax.Id">
                                        <span class="oi oi-pencil" aria-hidden="true"></span>Edit
                                    </a>
                                    <a class="btn btn-warning" @onclick="() => OpenDialog(Guid.Parse(stateTax.Id),stateTax.SolarModularCapacity)">
                                        <span class="oi oi-trash" aria-hidden="true"></span>Delete
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                    PageIndex="@pageIndex"
                                    Radius="3"
                                    OnSelectedPage="@SelectedPage">
                        </Pagination>
                    </tfoot>
                </table>
            }
        </div>
    </div>
    @if (DialogIsOpen)
    {
        <Popup Caption="Delete StateTax"
               Message="@message"
               OnClose="@OnDialogClose"
               Type="Popup.Category.DeleteNot">
        </Popup>
    }
</center>

@code {
    private Guid? idStateTax;
    private string message;
    private bool DialogIsOpen = false;

    //for pagination
    private int pageIndex = 1;
    private int itemsPerPage = 5;
    private int totalPages = 1;

    List<StateTax> allStateTaxList { set; get; } = new List<StateTax>();
    private IEnumerable<StateTax> stateTaxList = Enumerable.Empty<StateTax>();

    protected override async Task OnInitializedAsync()
    {
        await stateTaxViewModel.GetStateTaxes();
        allStateTaxList = stateTaxViewModel.StateTaxes;
        if (allStateTaxList != null)
        {
            totalPages = (int)(Math.Ceiling((double)allStateTaxList.Count() / (double)itemsPerPage));
            stateTaxList = allStateTaxList.Skip(0).Take(itemsPerPage);
        }
    }
    private void OpenDialog(Guid? id, string title)
    {
        DialogIsOpen = true;
        idStateTax = id;
        message = "Do you want to Delete \""
                  + title + "\"?";
    }

    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            await taxTreatementViewModel.GetTaxTreatement(idStateTax.ToString());
            await taxTreatementViewModel.DeleteTaxTreatement();
            await stateTaxViewModel.GetStateTaxes();
            allStateTaxList = stateTaxViewModel.StateTaxes;
            if (allStateTaxList != null)
            {
                totalPages = (int)(Math.Ceiling((double)allStateTaxList.Count() / (double)itemsPerPage));
                stateTaxList = allStateTaxList.Skip(0).Take(itemsPerPage);
            }

        }
        DialogIsOpen = false;
    }


    private void SelectedPage(int selectedPageIndex)
    {
        if (allStateTaxList != null)
        {
            pageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (pageIndex - 1);
            stateTaxList = allStateTaxList.Skip(skipCount).Take(itemsPerPage);
        }
    }
}
